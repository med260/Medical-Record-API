"""add timestamps to users

Revision ID: aafe8e540a05
Revises: 3ae9110ca6d2
Create Date: 2025-09-09 21:23:08.251232

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'aafe8e540a05'
down_revision: Union[str, Sequence[str], None] = '3ae9110ca6d2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_prescriptions_id'), table_name='prescriptions')
    op.drop_table('prescriptions')
    op.drop_index(op.f('ix_ailments_id'), table_name='ailments')
    op.drop_table('ailments')
    op.drop_index(op.f('ix_doctors_id'), table_name='doctors')
    op.create_foreign_key(None, 'doctors', 'users', ['id'], ['id'])
    op.drop_column('doctors', 'is_active')
    op.drop_column('doctors', 'role')
    op.add_column('medical_records', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.drop_column('medical_records', 'is_active')
    op.drop_column('medical_records', 'role')
    op.drop_index(op.f('ix_patients_id'), table_name='patients')
    op.create_foreign_key(None, 'patients', 'users', ['id'], ['id'])
    op.drop_column('patients', 'is_active')
    op.drop_column('patients', 'role')
    op.add_column('users', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('users', sa.Column('updated_at', sa.DateTime(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'updated_at')
    op.drop_column('users', 'created_at')
    op.add_column('patients', sa.Column('role', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('patients', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'patients', type_='foreignkey')
    op.create_index(op.f('ix_patients_id'), 'patients', ['id'], unique=False)
    op.add_column('medical_records', sa.Column('role', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('medical_records', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.drop_column('medical_records', 'updated_at')
    op.add_column('doctors', sa.Column('role', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('doctors', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'doctors', type_='foreignkey')
    op.create_index(op.f('ix_doctors_id'), 'doctors', ['id'], unique=False)
    op.create_table('ailments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('patient_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('severity', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], name=op.f('ailments_patient_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('ailments_pkey'))
    )
    op.create_index(op.f('ix_ailments_id'), 'ailments', ['id'], unique=False)
    op.create_table('prescriptions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('patient_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('medication_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('dosage', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('instructions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], name=op.f('prescriptions_patient_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('prescriptions_pkey'))
    )
    op.create_index(op.f('ix_prescriptions_id'), 'prescriptions', ['id'], unique=False)
    # ### end Alembic commands ###
